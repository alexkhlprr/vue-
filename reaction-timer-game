create a button to start a new game
-Keep track if the user is currently playing or not
-Start a timer for a random amout of time

1. create a button play with a method start inside of it

<button @click="start">  play </button>

2. declare a method start

methods: {
  start(){
    this.delay = 2000 + Math.ramdom() * 5000 // Eine radnom Zahl zwischen 2000 & 7000 wird generiert
    this.isPlaying = true                    // die variable in data isPlaying bekommt den boolean true zugwewiesen 
  }
}

3. declare components -> data  -> isPlaying and delay

components: {
  data(){
    isPlaying: false,  //default wert
    delay: null,  //default wert
  }
}

>>>>>>MYBLOCK.vue<<<<<<<<   //Der block der gemounted wird und nach dem Delay erscheint

1. Templayte Einrichtugung und Style von Block (selbst erklärend)

2. Taking in the Prop property of the dely

props: ["delay"]

3. Import block Component in parent component App

import myBlock from "./components/myBlock.vue"

4. Add components: { Block }, und füge block im Template von App hinzu

<Block/> // Block wird angezeigt wir wollen aber eine Bedingung schaffen das wenn ifPlaying true is der Block wird angeigt
dementsprechen fügen wir eine v-if="" directive hinzu
<Block v-if="isPLaying"/ >

5. delay prop binden um ein delay zu erzäugen

<Block v-if="isPLaying" :delay="delay"/ >

6. button disaybled machen solange gespielt wird

:disabled="isPLaying"

>>>>>>LIFECYCLE HOOKS<<<<<<<< 

1. In block difinieren wir die Data propertie 

showBlock= false // diese dint dazu das der Block per default nicht gerendert wird sondern erst wenn der button gedrückt wird und der timer(delay) vorbei ist

2. deswegen im div bei template noch eine bedingun hinzufügen

<div class="block" v-if="showBlock">

3. Definition von delay nachfdem der block gemounted wurde (mounted() HOOK)

mounted(){
setTimeout(() => {

  thisTimeout = true         // die function => wird gefeuert wenn this.delay durch ist die funtion lässt den block erscheinden indem showBlock true ist und die 
                              v-if im block getriggert wird
}, this.delay)
}, 

>>>>>>BLOCK REEACTING AFTER UPDATED<<<<<<<< 

We want to measure the time betweeen the block apear and the user clicking it


in mounted fügen wir erstmal die startTimer() methode hinzu damit die nach dem block erscheinen gefuert wird 

mounted(){
        console.log('component mounted')
        setTimeout(() => {
            this.showBlock = true
            this.startTimer()        <...................
        }, this.delay)
    },

1. We need 2 methods 
 Start timer  
  Stop timer

2. Deklaration von data propeties

timer: null,  // wird benötigt um den timer anzuhalten und der propertie reaction time 10 + milisekden hinzuzufügen
reactionTime: 0 // die reaction Zeit die am ende ausgegeben wird



3. Start timer & Stop timer

startTimer(){
  this.timer = setInterval(() => {
     this.reactionTIme += 10  
  }, 10 ) // function runs every 10 miliseconds so the reaction times gets increased +10 every milisecond
}

stopTimer(){
  clearInterval(this.timer)  // timer wird auf null gesetzt so wird der timer resetet und stopt
}

4. Click event hinzufügen zum button um die stopTimer zu triggern

 <div class="block" v-if="showBlock" @click="stopTimer"> 



>>>>>>BSHOW REACTION TIME TO THE USER<<<<<<<< 

It will be shown in the myRults.vue component and will be nested in the App.vue 

SO we need to pass the reactionTime to the app and the to the rults

We do this by emiting the custom events by the block component EMIT KEy word

1. When we stop the timer we want to emit the event

stopTimer(){
            clearInterval(this.timer)
            this.$emit("end",this.reactionTime) //declare a name and pass the data
        }

